Entrega 5.
Ejercicio 1

Divide and conquer para la matriz.
Caso base es la matriz de 1x1

1  2  3  4
5  6  7  8
9  10 11 12
13 14 15 16

Divido la matriz

1  2  | 3  4
5  6  | 7  8
-------------
9  10 | 11 12
13 14 | 15 16


1 | 2            1 | 5
------    -->    ------  y asi para todos
5 | 6            2 | 6

Y despues cambio entre las primeras cuatro

1  5  | 9  13
2  6  | 10 14
-------------
3  7  | 11 15
4  8  | 12 16

void traspuesta(Matriz<int> &m, int x, int y, int n) // n es la dimension
{
  if (n > 1){
    assert(esPar(n));

    traspuesta(m,x,y,n/2);
    traspuesta(m,x+n/2  ,y    ,n/2);
    traspuesta(m,x      ,y+n/2,n/2);
    traspuesta(m,x+n/2  ,y+n/2,n/2);

    Intercambiar(m,x ,y+n/2, x+n/2, y+n/2  n/2);
  }
  else
    assert(n == 1);
}


Ejercicio 3

Guardo las combinaciones en una tabla de memorizacion(en realidad es programacion dinamica)

Usamos un array para satisfacer las ordenes

Combinaciones de 3 tomadas de a 2:

Arranco poniendo el 1 en 0 y el 1 en la diagonal (C(1,1))
0  1  2  3
1  1

Despues calculo las combinaciones de 2 (= 1 + 1)
0  1  2  3
1  1  2

Agrego el 1 de la diagnoal 3,3
0  1  2  3
1  1  2  1

Actualizo las combinaciones en la pos 3
0  1  2  3
1  1  3  1

Me quedaron las combinaciones de 3 tomadas de a 2 (vale 3, en la posicion 2 del arr)\


Ejericio 2;
Puntero<Lista<Tira>> intercalar(Puntero<Lista<Tira>> skIzq, Puntero<Lista<Tira>> skDer){
  assert(estaOrdenada(skIzq));
  assert(estaOrdenada(skDer));
  assert(noTieneAlturasRepetidas(skIzq));
  assert(noTieneAlturasRepetidas(skDer));

  Puntero<Lista<Tira>> ret =
}


Puntero<Lista<Tira>> Skyline (Array<Puntero<Lista<Tira>>> s, int desde, int hasta){
  if (desde < hasta){
    int medio = (desde + hasta ) /2;
    Puntero<Lista<Tira>> skIzq = Skyline(s,desde,medio);
    Puntero<Lista<Tira>> skDer = Skyline(s,medio+1,hasta);
    Intercalar(skIzq,skDer);
  }
}
